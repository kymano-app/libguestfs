52d51
<   json_decref (* (json_t **) ptr);
59c58
< static json_t *get_json_output (guestfs_h *g, const char *filename);
---
> static json_t *get_json_output (guestfs_h *g, const char *filename);
66,83d64
<   CLEANUP_JSON_T_DECREF json_t *tree = get_json_output (g, filename);
<   json_t *node;
< 
<   if (tree == NULL)
<     return NULL;
< 
<   if (!json_is_object (tree))
<     goto bad_type;
< 
<   node = json_object_get (tree, "format");
<   if (!json_is_string (node))
<     goto bad_type;
< 
<   return safe_strndup (g, json_string_value (node),
<                           json_string_length (node)); /* caller frees */
< 
<  bad_type:
<   error (g, _("qemu-img info: JSON output did not contain ‘format’ key"));
90,106d70
<   CLEANUP_JSON_T_DECREF json_t *tree = get_json_output (g, filename);
<   json_t *node;
< 
<   if (tree == NULL)
<     return -1;
< 
<   if (!json_is_object (tree))
<     goto bad_type;
< 
<   node = json_object_get (tree, "virtual-size");
<   if (!json_is_integer (node))
<     goto bad_type;
< 
<   return json_integer_value (node);
< 
<  bad_type:
<   error (g, _("qemu-img info: JSON output did not contain ‘virtual-size’ key"));
113,134d76
<   CLEANUP_JSON_T_DECREF json_t *tree = get_json_output (g, filename);
<   json_t *node;
< 
<   if (tree == NULL)
<     return -1;
< 
<   if (!json_is_object (tree))
<     goto bad_type;
< 
<   node = json_object_get (tree, "backing-filename");
<   if (node == NULL)
<     return 0; /* no backing-filename key means no backing file */
< 
<   /* Work on the assumption that if this field is null, it means
<    * no backing file, rather than being an error.
<    */
<   if (json_is_null (node))
<     return 0;
<   return 1;
< 
<  bad_type:
<   error (g, _("qemu-img info: JSON output was not an object"));
147,184c89
<   CLEANUP_CMD_CLOSE struct command *cmd = guestfs_int_new_command (g);
<   int r;
<   json_t *tree = NULL;
< 
<   guestfs_int_cmd_add_arg (cmd, "qemu-img");
<   guestfs_int_cmd_add_arg (cmd, "info");
<   switch (qemu_img_supports_U_option (g)) {
<   case -1: return NULL;
<   case 0:  break;
<   default: guestfs_int_cmd_add_arg (cmd, "-U");
<   }
<   guestfs_int_cmd_add_arg (cmd, "--output");
<   guestfs_int_cmd_add_arg (cmd, "json");
<   if (filename[0] == '/')
<     guestfs_int_cmd_add_arg (cmd, filename);
<   else
<     guestfs_int_cmd_add_arg_format (cmd, "./%s", filename);
<   guestfs_int_cmd_set_stdout_callback (cmd, parse_json, &tree,
<                                        CMD_STDOUT_FLAG_WHOLE_BUFFER);
<   set_child_rlimits (cmd);
<   r = guestfs_int_cmd_run (cmd);
<   if (r == -1)
<     return NULL;
<   if (!WIFEXITED (r) || WEXITSTATUS (r) != 0) {
<     guestfs_int_external_command_failed (g, r, "qemu-img info", filename);
<     return NULL;
<   }
< 
<   if (tree == NULL)
<     return NULL;        /* parse_json callback already set an error */
< 
<   if (tree == PARSE_JSON_NO_OUTPUT) {
<     /* If this ever happened, it would indicate a bug in 'qemu-img info'. */
<     error (g, _("qemu-img info command produced no output, but didn't return an error status code"));
<     return NULL;
<   }
< 
<   return tree;          /* caller must call json_decref (tree) */
---
>   return NULL;          /* caller must call json_decref (tree) */
191,213d95
<   json_t **tree_ret = treevp;
<   json_error_t err;
< 
<   assert (*tree_ret == NULL);
< 
<   /* If the input is completely empty, return a magic value to the
<    * caller.  'qemu-img info' will return an error, but this will let
<    * us catch the case where it does not.
<    */
<   if (len == 0) {
<     *tree_ret = PARSE_JSON_NO_OUTPUT;
<     return;
<   }
< 
<   debug (g, "%s: qemu-img info JSON output:\n%.*s\n", __func__, (int) len, input);
< 
<   *tree_ret = json_loadb (input, len, 0, &err);
<   if (*tree_ret == NULL) {
<     if (strlen (err.text) > 0)
<       error (g, _("qemu-img info: JSON parse error: %s"), err.text);
<     else
<       error (g, _("qemu-img info: unknown JSON parse error"));
<   }
