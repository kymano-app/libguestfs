37c37
< guestfs_int_match (guestfs_h *g, const char *str, const pcre2_code *re)
---
> guestfs_int_match (guestfs_h *g, const char *str, const char *re)
39,47d38
<   CLEANUP_PCRE2_MATCH_DATA_FREE pcre2_match_data *match_data =
<     pcre2_match_data_create_from_pattern (re, NULL);
<   int r;
< 
<   r = pcre2_match (re, (PCRE2_SPTR)str, PCRE2_ZERO_TERMINATED,
<                    0, 0, match_data, NULL);
<   if (r == PCRE2_ERROR_NOMATCH)
<     return 0;
< 
56c47
< guestfs_int_match1 (guestfs_h *g, const char *str, const pcre2_code *re)
---
> guestfs_int_match1 (guestfs_h *g, const char *str, const char *re)
58,70c49
<   CLEANUP_PCRE2_MATCH_DATA_FREE pcre2_match_data *match_data =
<     pcre2_match_data_create_from_pattern (re, NULL);
<   PCRE2_SIZE *vec;
<   int r;
< 
<   r = pcre2_match (re, (PCRE2_SPTR)str, PCRE2_ZERO_TERMINATED,
<                    0, 0, match_data, NULL);
<   if (r == PCRE2_ERROR_NOMATCH)
<     return NULL;
< 
<   vec = pcre2_get_ovector_pointer (match_data);
< 
<   return r == 2 ? safe_strndup (g, &str[vec[2]], vec[3]-vec[2]) : NULL;
---
>   return NULL;
75c54
< guestfs_int_match2 (guestfs_h *g, const char *str, const pcre2_code *re,
---
> guestfs_int_match2 (guestfs_h *g, const char *str, const char *re,
78,95d56
<   CLEANUP_PCRE2_MATCH_DATA_FREE pcre2_match_data *match_data =
<     pcre2_match_data_create_from_pattern (re, NULL);
<   PCRE2_SIZE *vec;
<   int r;
< 
<   r = pcre2_match (re, (PCRE2_SPTR)str, PCRE2_ZERO_TERMINATED,
<                    0, 0, match_data, NULL);
<   if (r == PCRE2_ERROR_NOMATCH)
<     return 0;
< 
<   vec = pcre2_get_ovector_pointer (match_data);
< 
<   *ret1 = NULL;
<   *ret2 = NULL;
< 
<   if (r > 1) *ret1 = safe_strndup (g, &str[vec[2]], vec[3]-vec[2]);
<   if (r > 2) *ret2 = safe_strndup (g, &str[vec[4]], vec[5]-vec[4]);
< 
101c62
< guestfs_int_match3 (guestfs_h *g, const char *str, const pcre2_code *re,
---
> guestfs_int_match3 (guestfs_h *g, const char *str, const char *re,
104,123d64
<   CLEANUP_PCRE2_MATCH_DATA_FREE pcre2_match_data *match_data =
<     pcre2_match_data_create_from_pattern (re, NULL);
<   PCRE2_SIZE *vec;
<   int r;
< 
<   r = pcre2_match (re, (PCRE2_SPTR)str, PCRE2_ZERO_TERMINATED,
<                    0, 0, match_data, NULL);
<   if (r == PCRE2_ERROR_NOMATCH)
<     return 0;
< 
<   vec = pcre2_get_ovector_pointer (match_data);
< 
<   *ret1 = NULL;
<   *ret2 = NULL;
<   *ret3 = NULL;
< 
<   if (r > 1) *ret1 = safe_strndup (g, &str[vec[2]], vec[3]-vec[2]);
<   if (r > 2) *ret2 = safe_strndup (g, &str[vec[4]], vec[5]-vec[4]);
<   if (r > 3) *ret3 = safe_strndup (g, &str[vec[6]], vec[7]-vec[6]);
< 
129c70
< guestfs_int_match4 (guestfs_h *g, const char *str, const pcre2_code *re,
---
> guestfs_int_match4 (guestfs_h *g, const char *str, const char *re,
132,153d72
<   CLEANUP_PCRE2_MATCH_DATA_FREE pcre2_match_data *match_data =
<     pcre2_match_data_create_from_pattern (re, NULL);
<   PCRE2_SIZE *vec;
<   int r;
< 
<   r = pcre2_match (re, (PCRE2_SPTR)str, PCRE2_ZERO_TERMINATED,
<                    0, 0, match_data, NULL);
<   if (r == PCRE2_ERROR_NOMATCH)
<     return 0;
< 
<   vec = pcre2_get_ovector_pointer (match_data);
< 
<   *ret1 = NULL;
<   *ret2 = NULL;
<   *ret3 = NULL;
<   *ret4 = NULL;
< 
<   if (r > 1) *ret1 = safe_strndup (g, &str[vec[2]], vec[3]-vec[2]);
<   if (r > 2) *ret2 = safe_strndup (g, &str[vec[4]], vec[5]-vec[4]);
<   if (r > 3) *ret3 = safe_strndup (g, &str[vec[6]], vec[7]-vec[6]);
<   if (r > 4) *ret4 = safe_strndup (g, &str[vec[8]], vec[9]-vec[8]);
< 
159c78
< guestfs_int_match6 (guestfs_h *g, const char *str, const pcre2_code *re,
---
> guestfs_int_match6 (guestfs_h *g, const char *str, const char *re,
163,188d81
<   CLEANUP_PCRE2_MATCH_DATA_FREE pcre2_match_data *match_data =
<     pcre2_match_data_create_from_pattern (re, NULL);
<   PCRE2_SIZE *vec;
<   int r;
< 
<   r = pcre2_match (re, (PCRE2_SPTR)str, PCRE2_ZERO_TERMINATED,
<                    0, 0, match_data, NULL);
<   if (r == PCRE2_ERROR_NOMATCH)
<     return 0;
< 
<   vec = pcre2_get_ovector_pointer (match_data);
< 
<   *ret1 = NULL;
<   *ret2 = NULL;
<   *ret3 = NULL;
<   *ret4 = NULL;
<   *ret5 = NULL;
<   *ret6 = NULL;
< 
<   if (r > 1) *ret1 = safe_strndup (g, &str[vec[2]], vec[3]-vec[2]);
<   if (r > 2) *ret2 = safe_strndup (g, &str[vec[4]], vec[5]-vec[4]);
<   if (r > 3) *ret3 = safe_strndup (g, &str[vec[6]], vec[7]-vec[6]);
<   if (r > 4) *ret4 = safe_strndup (g, &str[vec[8]], vec[9]-vec[8]);
<   if (r > 5) *ret5 = safe_strndup (g, &str[vec[10]], vec[11]-vec[10]);
<   if (r > 6) *ret6 = safe_strndup (g, &str[vec[12]], vec[13]-vec[12]);
< 
